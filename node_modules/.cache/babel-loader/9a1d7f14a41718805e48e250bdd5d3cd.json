{"ast":null,"code":"import * as RestService from './restService';\nconst server = \"http://localhost:3000/\";\nconst url = \"devices\";\n\nconst buildOptions = (method, data) => ({\n  url: `${server}${url}`,\n  method,\n  data\n});\n\nconst execute = _ref => {\n  let {\n    data,\n    method\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    RestService.send(buildOptions(method, data)).then(response => {\n      resolve(response);\n    }).catch(error => {\n      const errorResponse = error.response.data;\n      reject(errorResponse);\n    });\n  });\n}; //\n// const save = (data, url) => new Promise((resolve, reject) => {\n//     RestService.send(buildOptions(\"POST\", data))\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const update = (data, url, id) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}/${id}`,\n//         method: 'PUT',\n//         data,\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const remove = (url, id) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}/${id}`,\n//         method: 'DELETE'\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const get = (url) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}`,\n//         method: \"GET\",\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error?.response?.data;\n//             reject(errorResponse);\n//         });\n// });\n// export {save, get, remove, update};\n\n\nexport { execute };","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/services/deviceService.js"],"names":["RestService","server","url","buildOptions","method","data","execute","Promise","resolve","reject","send","then","response","catch","error","errorResponse"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,MAAMC,MAAM,GAAG,wBAAf;AACA,MAAMC,GAAG,GAAG,SAAZ;;AAEA,MAAMC,YAAY,GAAG,CAACC,MAAD,EAASC,IAAT,MAAmB;AACpCH,EAAAA,GAAG,EAAG,GAAED,MAAO,GAAEC,GAAI,EADe;AAEpCE,EAAAA,MAFoC;AAGpCC,EAAAA;AAHoC,CAAnB,CAArB;;AAMA,MAAMC,OAAO,GAAE;AAAA,MAAC;AAACD,IAAAA,IAAD;AAAOD,IAAAA;AAAP,GAAD;AAAA,SAAmB,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/DT,IAAAA,WAAW,CAACU,IAAZ,CAAiBP,YAAY,CAACC,MAAD,EAASC,IAAT,CAA7B,EACKM,IADL,CACWC,QAAD,IAAc;AAChBJ,MAAAA,OAAO,CAACI,QAAD,CAAP;AACH,KAHL,EAIKC,KAJL,CAIYC,KAAD,IAAW;AACd,YAAMC,aAAa,GAAGD,KAAK,CAACF,QAAN,CAAeP,IAArC;AACAI,MAAAA,MAAM,CAACM,aAAD,CAAN;AACH,KAPL;AAQH,GATiC,CAAnB;AAAA,CAAf,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,SAAQT,OAAR","sourcesContent":["import * as RestService from './restService';\n\nconst server = \"http://localhost:3000/\";\nconst url = \"devices\";\n\nconst buildOptions = (method, data) => ({\n    url: `${server}${url}`,\n    method,\n    data,\n});\n\nconst execute =({data, method})=> new Promise((resolve, reject) => {\n    RestService.send(buildOptions(method, data))\n        .then((response) => {\n            resolve(response);\n        })\n        .catch((error) => {\n            const errorResponse = error.response.data;\n            reject(errorResponse);\n        });\n});\n\n//\n// const save = (data, url) => new Promise((resolve, reject) => {\n//     RestService.send(buildOptions(\"POST\", data))\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const update = (data, url, id) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}/${id}`,\n//         method: 'PUT',\n//         data,\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const remove = (url, id) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}/${id}`,\n//         method: 'DELETE'\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error.response.data;\n//             reject(errorResponse);\n//         });\n// });\n//\n// const get = (url) => new Promise((resolve, reject) => {\n//     const options = {\n//         url: `${server}${url}`,\n//         method: \"GET\",\n//     };\n//     RestService.send(options)\n//         .then((response) => {\n//             resolve(response);\n//         })\n//         .catch((error) => {\n//             const errorResponse = error?.response?.data;\n//             reject(errorResponse);\n//         });\n// });\n\n\n// export {save, get, remove, update};\nexport {execute};\n"]},"metadata":{},"sourceType":"module"}