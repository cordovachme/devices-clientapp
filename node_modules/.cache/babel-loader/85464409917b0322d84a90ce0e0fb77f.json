{"ast":null,"code":"var _jsxFileName = \"/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport { execute } from \"../services/deviceService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DEVICE_TYPE\n} = Constants;\nconst {\n  POST,\n  PUT\n} = Constants;\n\nconst CreateEditForm = props => {\n  _s();\n\n  console.log(\"props==>\", props);\n  const [show, setShow] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const {\n    entity\n  } = props;\n  console.log(\"entity\");\n  let entityData;\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n    entityData = {\n      system_name: form.elements['system_name'].value,\n      type: form.elements['type'].value,\n      hdd_capacity: form.elements['hdd_capacity'].value\n    };\n\n    if (!(entity !== null && entity !== void 0 && entity.id)) {\n      execute({\n        data: entityData,\n        method: POST\n      });\n    } else {\n      const data = { ...entityData,\n        id: entity.id\n      };\n      execute({\n        data,\n        PUT\n      });\n    }\n  };\n\n  const drawOptions = data => {\n    let options = [];\n    data.forEach(option => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.text\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  };\n\n  const handleClose = () => setShow(false);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Add Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        validated: validated,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"System name *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter system name\",\n            required: true,\n            id: \"system_name\",\n            defaultValue: entity === null || entity === void 0 ? void 0 : entity.system_name,\n            onKeyPress: event => {\n              if (event.target.value.length > 40) {\n                event.preventDefault();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"System name is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Type *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            id: \"type\",\n            defaultValue: entity === null || entity === void 0 ? void 0 : entity.type,\n            children: drawOptions(DEVICE_TYPE)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"HDD Capacity (GB) *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter an HDD Capacity\",\n            id: \"hdd_capacity\",\n            defaultValue: entity === null || entity === void 0 ? void 0 : entity.hdd_capacity,\n            required: true,\n            onKeyPress: event => {\n              if (!/[0-9]/.test(event.key)) {\n                event.preventDefault();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"HDD Capacity is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          align: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), \" \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CreateEditForm, \"o5fY83f7ccvpk0FEwO8iBM2vNe0=\");\n\n_c = CreateEditForm;\nCreateEditForm.propTypes = {\n  entity: PropTypes.shape({\n    id: PropTypes.string,\n    system_name: PropTypes.string,\n    type: PropTypes.string,\n    hdd_capacity: PropTypes.string\n  })\n};\nCreateEditForm.defaultProps = {\n  entity: {}\n};\nexport default CreateEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditForm\");","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js"],"names":["React","useState","Button","Form","Modal","PropTypes","Constants","execute","DEVICE_TYPE","POST","PUT","CreateEditForm","props","console","log","show","setShow","validated","setValidated","entity","entityData","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","system_name","elements","value","type","hdd_capacity","id","data","method","drawOptions","options","forEach","option","push","text","handleClose","target","length","test","key","propTypes","shape","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {Button, Form, Modal} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport {execute} from \"../services/deviceService\";\n\nconst {DEVICE_TYPE} = Constants;\nconst {POST, PUT} = Constants;\n\n\nconst CreateEditForm = (props) => {\n    console.log(\"props==>\", props);\n    const [show, setShow] = useState(true);\n    const [validated, setValidated] = useState(false);\n    const {entity} = props;\n    console.log(\"entity\");\n    let entityData;\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n        entityData = {\n            system_name: form.elements['system_name'].value,\n            type: form.elements['type'].value,\n            hdd_capacity: form.elements['hdd_capacity'].value\n        };\n        if (!entity?.id) {\n            execute({data: entityData, method: POST});\n        }else{\n            const data = {...entityData, id: entity.id};\n            execute({data, PUT});\n        }\n    };\n\n    const drawOptions = (data) => {\n        let options = [];\n        data.forEach((option) => {\n            options.push(<option key={option.value} value={option.value}>{option.text}</option>);\n        })\n        return options;\n    };\n\n\n    const handleClose = () => setShow(false);\n\n    return <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n            <Modal.Title>Add Device</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form validated={validated} onSubmit={handleSubmit}>\n                <Form.Group>\n                    <Form.Label>System name *</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter system name\"\n                        required\n                        id=\"system_name\"\n                        defaultValue={entity?.system_name}\n                        onKeyPress={(event) => {\n                            if (event.target.value.length > 40) {\n                                event.preventDefault();\n                            }\n                        }}\n                    />\n                    <Form.Control.Feedback\n                        type=\"invalid\">\n                        {\"System name is required\"}\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Type *</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        id=\"type\"\n                        defaultValue={entity?.type}\n                    >\n                        {drawOptions(DEVICE_TYPE)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>HDD Capacity (GB) *</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter an HDD Capacity\"\n                        id=\"hdd_capacity\"\n                        defaultValue={entity?.hdd_capacity}\n                        required\n                        onKeyPress={(event) => {\n                            if (!/[0-9]/.test(event.key)) {\n                                event.preventDefault();\n                            }\n                        }}/>\n                    <Form.Control.Feedback type=\"invalid\">\n                        {\"HDD Capacity is required\"}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <div align={\"right\"}>\n                <Button variant=\"primary\" type=\"submit\">\n                    Save\n                </Button> &nbsp;&nbsp;\n                    <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n                </div>\n\n            </Form>\n        </Modal.Body>\n    </Modal>\n\n}\n\nCreateEditForm.propTypes = {\n    entity:   PropTypes.shape({\n        id: PropTypes.string,\n        system_name: PropTypes.string,\n        type: PropTypes.string,\n        hdd_capacity: PropTypes.string,\n    }),\n}\nCreateEditForm.defaultProps = {\n    entity: {},\n}\n\nexport default CreateEditForm;"]},"metadata":{},"sourceType":"module"}