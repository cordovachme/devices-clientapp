{"ast":null,"code":"var _jsxFileName = \"/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DEVICE_TYPE\n} = Constants;\n\nconst CreateEditForm = props => {\n  _s();\n\n  const [show, setShow] = useState(true);\n  const [saved, setSaved] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const {\n    entity\n  } = props;\n  const {\n    create\n  } = useDeviceForm();\n  let entitySaved;\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    if (!entity) {\n      entitySaved = {\n        system_name: form.elements['system_name'].value,\n        type: form.elements['type'].value,\n        hdd_capacity: form.elements['hdd_capacity'].value\n      };\n      create({\n        entity: entitySaved\n      }).then(() => setSaved(true));\n    }\n  }; //\n  // const successMessage = () => {\n  //     return <Alert key={\"success\"} variant=\"success\">\n  //         The device was created successfully!\n  //     </Alert>\n  // }\n  //\n  // const errorMessage = () => {\n  //     return <Alert key={\"error\"} variant=\"error\">\n  //         Ups!! something is wrong.\n  //     </Alert>\n  // }\n  //\n  // useEffect(() => {\n  //     if (saved) {\n  //         successMessage();\n  //     } else {\n  //         errorMessage();\n  //     }\n  // }, [saved])\n\n\n  const drawOptions = data => {\n    let options = [];\n    data.forEach(option => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.text\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  };\n\n  const handleClose = () => setShow(false);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Add Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        validated: validated,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicSystemName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"System name *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter system name\",\n            required: true,\n            id: \"system_name\",\n            value: entity === null || entity === void 0 ? void 0 : entity.system_name,\n            onKeyPress: event => {\n              if (event.target.value.length > 40) {\n                event.preventDefault();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"System name is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicType\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Type *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            id: \"type\",\n            value: entity === null || entity === void 0 ? void 0 : entity.type,\n            children: drawOptions(DEVICE_TYPE)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicCapacity\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"HDD Capacity (GB) *\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter an HDD Capacity\",\n            id: \"hdd_capacity\",\n            value: entity === null || entity === void 0 ? void 0 : entity.hdd_capacity,\n            required: true,\n            onKeyPress: event => {\n              if (!/[0-9]/.test(event.key)) {\n                event.preventDefault();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"HDD Capacity is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CreateEditForm, \"+FjAlKGDbyDROaPfyiEeNtWdUBg=\", false, function () {\n  return [useDeviceForm];\n});\n\n_c = CreateEditForm;\nCreateEditForm.propTypes = {\n  entity: PropTypes.shape({\n    id: PropTypes.number,\n    system_name: PropTypes.string,\n    type: PropTypes.string,\n    hdd_capacity: PropTypes.number\n  })\n};\nCreateEditForm.defaultProps = {\n  entity: {}\n};\nexport default CreateEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditForm\");","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js"],"names":["React","useContext","useEffect","useState","Button","Form","Modal","PropTypes","Constants","useDeviceForm","DEVICE_TYPE","CreateEditForm","props","show","setShow","saved","setSaved","validated","setValidated","entity","create","entitySaved","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","system_name","elements","value","type","hdd_capacity","then","drawOptions","data","options","forEach","option","push","text","handleClose","target","length","test","key","propTypes","shape","id","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport {Button, Form, Modal} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\n\nconst {DEVICE_TYPE} = Constants;\n\nconst CreateEditForm = (props) => {\n    const [show, setShow] = useState(true);\n    const [saved, setSaved] = useState(true);\n    const [validated, setValidated] = useState(false);\n    const {entity} = props;\n    const {create} = useDeviceForm();\n    let entitySaved;\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n        if (!entity) {\n            entitySaved = {\n                system_name: form.elements['system_name'].value,\n                type: form.elements['type'].value,\n                hdd_capacity: form.elements['hdd_capacity'].value\n            };\n            create({entity: entitySaved}).then(() => setSaved(true));\n        }\n    };\n    //\n    // const successMessage = () => {\n    //     return <Alert key={\"success\"} variant=\"success\">\n    //         The device was created successfully!\n    //     </Alert>\n    // }\n    //\n    // const errorMessage = () => {\n    //     return <Alert key={\"error\"} variant=\"error\">\n    //         Ups!! something is wrong.\n    //     </Alert>\n    // }\n    //\n    // useEffect(() => {\n    //     if (saved) {\n    //         successMessage();\n    //     } else {\n    //         errorMessage();\n    //     }\n    // }, [saved])\n\n\n    const drawOptions = (data) => {\n        let options = [];\n        data.forEach((option) => {\n            options.push(<option key={option.value} value={option.value}>{option.text}</option>);\n        })\n        return options;\n    };\n\n\n    const handleClose = () => setShow(false);\n\n    return <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n            <Modal.Title>Add Device</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicSystemName\">\n                    <Form.Label>System name *</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter system name\"\n                        required\n                        id=\"system_name\"\n                        value={entity?.system_name}\n                        onKeyPress={(event) => {\n                            if (event.target.value.length > 40) {\n                                event.preventDefault();\n                            }\n                        }}\n                    />\n                    <Form.Control.Feedback\n                        type=\"invalid\">\n                        {\"System name is required\"}\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"formBasicType\">\n                    <Form.Label>Type *</Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                        id=\"type\"\n                        value={entity?.type}\n                    >\n                        {drawOptions(DEVICE_TYPE)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"formBasicCapacity\">\n                    <Form.Label>HDD Capacity (GB) *</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter an HDD Capacity\"\n                        id=\"hdd_capacity\"\n                        value={entity?.hdd_capacity}\n                        required\n                        onKeyPress={(event) => {\n                            if (!/[0-9]/.test(event.key)) {\n                                event.preventDefault();\n                            }\n                        }}/>\n                    <Form.Control.Feedback type=\"invalid\">\n                        {\"HDD Capacity is required\"}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                    Save\n                </Button>\n            </Form>\n        </Modal.Body>\n    </Modal>\n\n}\n\nCreateEditForm.propTypes = {\n    entity:   PropTypes.shape({\n        id: PropTypes.number,\n        system_name: PropTypes.string,\n        type: PropTypes.string,\n        hdd_capacity: PropTypes.number,\n    }),\n}\nCreateEditForm.defaultProps = {\n    entity: {},\n}\n\nexport default CreateEditForm;"]},"metadata":{},"sourceType":"module"}