{"ast":null,"code":"var _jsxFileName = \"/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\nimport { Alert } from \"bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DEVICE_TYPE\n} = Constants;\n\nconst CreateEditForm = props => {\n  _s();\n\n  const [validated, setValidated] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const {\n    entity\n  } = props;\n  const {\n    create\n  } = useDeviceForm();\n  let entitySaved;\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    if (!entity) {\n      entitySaved = {\n        system_name: form.elements['system_name'].value,\n        type: form.elements['type'].value,\n        hdd_capacity: form.elements['hdd_capacity'].value\n      };\n      create({\n        entity: entitySaved\n      }).then(() => setSaved(true));\n    }\n  };\n\n  const successMessage = () => {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: \"The device was created successfully!\"\n    }, \"success\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  };\n\n  const errorMessage = () => {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"error\",\n      children: \"Ups!! something is wrong.\"\n    }, \"error\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  };\n\n  useEffect(() => {\n    if (saved) {\n      successMessage();\n    } else {\n      errorMessage();\n    }\n  }, [saved]);\n\n  const drawOptions = data => {\n    let options = [];\n    data.forEach(option => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.text\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicSystemName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"System name *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter system name\",\n        required: true,\n        id: \"system_name\",\n        value: entity.system_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        children: \"System name is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicType\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Type *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        id: \"type\",\n        value: entity.type,\n        children: drawOptions(DEVICE_TYPE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicCapacity\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"HDD Capacity (GB) *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter an HDD Capacity\",\n        id: \"hdd_capacity\",\n        value: entity.hdd_capacity,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        children: \"HDD Capacity is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CreateEditForm, \"3LllvqVeQcEmlfixw30b3KGF6Vc=\", false, function () {\n  return [useDeviceForm];\n});\n\n_c = CreateEditForm;\nCreateEditForm.propTypes = {\n  visible: PropTypes.bool\n};\nCreateEditForm.defaultProps = {\n  visible: false\n};\nexport default CreateEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditForm\");","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js"],"names":["React","useEffect","useState","Button","Form","PropTypes","Constants","useDeviceForm","Alert","DEVICE_TYPE","CreateEditForm","props","validated","setValidated","saved","setSaved","entity","create","entitySaved","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","system_name","elements","value","type","hdd_capacity","then","successMessage","errorMessage","drawOptions","data","options","forEach","option","push","text","propTypes","visible","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\nimport {Alert} from \"bootstrap\";\n\nconst {DEVICE_TYPE} = Constants;\n\nconst CreateEditForm = (props) => {\n    const [validated, setValidated] = useState(false);\n    const [saved, setSaved] = useState(false);\n    const {entity} = props;\n    const {create} = useDeviceForm();\n    let entitySaved;\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n        if (!entity) {\n            entitySaved = {\n                system_name: form.elements['system_name'].value,\n                type: form.elements['type'].value,\n                hdd_capacity: form.elements['hdd_capacity'].value\n            };\n            create({entity: entitySaved}).then(() => setSaved(true));\n        }\n    };\n\n    const successMessage = () => {\n        return <Alert key={\"success\"} variant=\"success\">\n            The device was created successfully!\n        </Alert>\n    }\n\n    const errorMessage = () => {\n        return <Alert key={\"error\"} variant=\"error\">\n            Ups!! something is wrong.\n        </Alert>\n    }\n\n    useEffect(() => {\n        if (saved) {\n            successMessage();\n        } else {\n            errorMessage();\n        }\n    }, [saved])\n\n\n    const drawOptions = (data) => {\n        let options = [];\n        data.forEach((option) => {\n            options.push(<option key={option.value} value={option.value}>{option.text}</option>);\n        })\n        return options;\n    };\n\n    return <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicSystemName\">\n            <Form.Label>System name *</Form.Label>\n            <Form.Control\n                type=\"text\"\n                placeholder=\"Enter system name\"\n                required\n                id=\"system_name\"\n                value={entity.system_name}\n            />\n            <Form.Control.Feedback\n                type=\"invalid\"\n            >\n                {\"System name is required\"}\n            </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicType\">\n            <Form.Label>Type *</Form.Label>\n            <Form.Control\n                as=\"select\"\n                id=\"type\"\n                value={entity.type}\n            >\n                {drawOptions(DEVICE_TYPE)}\n            </Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicCapacity\">\n            <Form.Label>HDD Capacity (GB) *</Form.Label>\n            <Form.Control\n                type=\"text\"\n                placeholder=\"Enter an HDD Capacity\"\n                id=\"hdd_capacity\"\n                value={entity.hdd_capacity}\n                required/>\n            <Form.Control.Feedback type=\"invalid\">\n                {\"HDD Capacity is required\"}\n            </Form.Control.Feedback>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n            Submit\n        </Button>\n    </Form>\n\n}\n\nCreateEditForm.propTypes = {\n    visible: PropTypes.bool,\n}\nCreateEditForm.defaultProps = {\n    visible: false,\n}\n\nexport default CreateEditForm;"]},"metadata":{},"sourceType":"module"}