{"ast":null,"code":"var _jsxFileName = \"/Users/mariacordova/Documents/exercise/devices-clientapp/src/components/DevicesTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from \"react\";\nimport useDeviceList from \"../hooks/useDeviceList\";\nimport Constants from \"../util/Constants\";\nimport PropTypes from \"prop-types\";\nimport { Button, Table } from \"react-bootstrap\";\nimport CreateEditForm from \"../pages/CreateEditForm\";\nimport { execute } from \"../services/deviceService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  COLUMNS,\n  DELETE\n} = Constants;\n\nconst DevicesTable = props => {\n  _s();\n\n  const {\n    filterBy\n  } = props;\n  let {\n    devicesList\n  } = useDeviceList();\n  const [entityDeleted, setEntityDeleted] = useState();\n  const [entity, setEntity] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [sortConfig, setSortConfig] = useState(null);\n  const [sortBy, setSortBy] = useState(undefined);\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) {\n      return;\n    }\n\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  const data = useMemo(() => {\n    let newData = devicesList;\n\n    if (filterBy && filterBy !== \"All\") {\n      newData = devicesList.filter(device => device.type === filterBy);\n    }\n\n    if (sortBy) {\n      console.log(\"sortConfig==>\", sortConfig);\n      newData.sort((a, b) => {\n        console.log(\"a[sortConfig.sort]==>\", a[sortConfig.sort]);\n\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n\n        return 0;\n      });\n    }\n\n    return Object.keys(newData).map(key => {\n      if (entityDeleted !== newData[key]) {\n        return newData[key];\n      } else {\n        return undefined;\n      }\n    });\n  }, [devicesList, filterBy, entityDeleted, sortBy, sortConfig]);\n\n  const requestSort = key => {\n    let direction = 'ascending';\n\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n\n    setSortConfig({\n      key,\n      direction\n    });\n    setSortBy(key);\n  };\n\n  const createHeader = () => {\n    let header = [];\n    COLUMNS.forEach(_ref => {\n      let {\n        text,\n        sort\n      } = _ref;\n      header.push( /*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => requestSort(sort),\n          className: getClassNamesFor(sort),\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }, this));\n    });\n    header.push( /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this));\n    return header;\n  };\n\n  const createBody = () => {\n    let table = [];\n    data.forEach((entity, index) => {\n      let children = [];\n\n      if (entity) {\n        const {\n          id,\n          system_name,\n          type,\n          hdd_capacity\n        } = entity;\n        children.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: system_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 31\n        }, this));\n        children.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 31\n        }, this));\n        children.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: hdd_capacity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 31\n        }, this));\n        children.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => onSelect(e, entity),\n            children: \"Edit \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 35\n          }, this), \"\\xA0\\xA0 \", /*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => onDelete(e, entity),\n            children: \" Delete \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 31\n        }, this));\n        table.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: children\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 28\n        }, this));\n      }\n    });\n    return table;\n  };\n\n  const onSelect = (event, entity) => {\n    setShowModal(true);\n    setEntity(() => entity);\n  };\n\n  const onDelete = (event, entity) => {\n    execute({\n      data: entity,\n      method: DELETE\n    });\n    setEntityDeleted(entity);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: createHeader()\n        }, \"headers\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: createBody()\n      }, \"body\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, \"table\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), showModal ? /*#__PURE__*/_jsxDEV(CreateEditForm, {\n      entity: entity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true);\n};\n\n_s(DevicesTable, \"tioXQBcUtGDAUJ+MpHNjhtYqo/c=\", false, function () {\n  return [useDeviceList];\n});\n\n_c = DevicesTable;\nDevicesTable.propTypes = {\n  filterBy: PropTypes.string,\n  sortBy: PropTypes.string\n};\nDevicesTable.defaultProps = {\n  filterBy: undefined,\n  sortBy: undefined\n};\nexport default DevicesTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DevicesTable\");","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/components/DevicesTable.js"],"names":["React","useMemo","useState","useDeviceList","Constants","PropTypes","Button","Table","CreateEditForm","execute","COLUMNS","DELETE","DevicesTable","props","filterBy","devicesList","entityDeleted","setEntityDeleted","entity","setEntity","showModal","setShowModal","sortConfig","setSortConfig","sortBy","setSortBy","undefined","getClassNamesFor","name","key","direction","data","newData","filter","device","type","console","log","sort","a","b","Object","keys","map","requestSort","createHeader","header","forEach","text","push","createBody","table","index","children","id","system_name","hdd_capacity","e","onSelect","onDelete","event","method","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from \"react\";\nimport useDeviceList from \"../hooks/useDeviceList\";\nimport Constants from \"../util/Constants\";\nimport PropTypes from \"prop-types\";\nimport {Button, Table} from \"react-bootstrap\";\nimport CreateEditForm from \"../pages/CreateEditForm\";\nimport {execute} from \"../services/deviceService\";\n\nconst {COLUMNS, DELETE} = Constants;\n\nconst DevicesTable = (props) => {\n    const {filterBy} = props;\n    let {devicesList} = useDeviceList();\n    const [entityDeleted, setEntityDeleted] = useState();\n    const [entity, setEntity] = useState({});\n    const [showModal, setShowModal] = useState(false);\n    const [sortConfig, setSortConfig] = useState(null);\n    const [sortBy, setSortBy] = useState(undefined);\n    const getClassNamesFor = (name) => {\n        if (!sortConfig) {\n            return;\n        }\n        return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n    const data = useMemo(() => {\n        let newData = devicesList;\n        if (filterBy && filterBy !== \"All\") {\n            newData = devicesList.filter(device => device.type === filterBy);\n        }\n        if(sortBy){\n            console.log(\"sortConfig==>\", sortConfig);\n            newData.sort((a, b) => {\n                console.log(\"a[sortConfig.sort]==>\", a[sortConfig.sort]);\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\n                }\n                return 0;\n            });\n        }\n        return Object.keys(newData).map(\n            (key) => {\n                if (entityDeleted !== newData[key]) {\n                    return newData[key]\n                }else{\n                    return undefined;\n                }\n            }\n        );\n    }, [devicesList, filterBy, entityDeleted, sortBy, sortConfig]);\n\n    const requestSort = (key) => {\n        let direction = 'ascending';\n        if (\n            sortConfig &&\n            sortConfig.key === key &&\n            sortConfig.direction === 'ascending'\n        ) {\n            direction = 'descending';\n        }\n        setSortConfig({ key, direction });\n        setSortBy(key);\n    };\n\n\n    const createHeader = () => {\n        let header = [];\n        COLUMNS.forEach(({text, sort}) => {\n            header.push(<th><button\n                type=\"button\"\n                onClick={() => requestSort(sort)}\n                className={getClassNamesFor(sort)}\n            >\n                {text}\n            </button></th>);\n        })\n        header.push(<th>{}</th>);\n        return header;\n    };\n\n    const createBody = () => {\n        let table = [];\n        data.forEach((entity, index) => {\n            let children = [];\n            if (entity) {\n                const {id, system_name, type, hdd_capacity} = entity;\n                children.push(<td>{system_name}</td>);\n                children.push(<td>{type}</td>);\n                children.push(<td>{hdd_capacity}</td>);\n                children.push(<td><Button\n                    onClick={e => onSelect(e, entity)}\n                    >Edit </Button>&nbsp;&nbsp; <Button\n                    onClick={e => onDelete(e, entity)}\n                > Delete </Button></td>);\n\n                table.push(<tr key={id}>{children}</tr>);\n            }\n        });\n        return table;\n    };\n\n    const onSelect = (event, entity) => {\n        setShowModal(true);\n        setEntity(() => entity);\n    };\n    const onDelete = (event, entity) => {\n        execute({data: entity, method: DELETE});\n        setEntityDeleted(entity);\n    };\n\n    return (<>\n            <Table key={\"table\"}>\n                <thead>\n                <tr key={\"headers\"}>\n                    {createHeader()}\n                </tr>\n                </thead>\n                <tbody key={\"body\"}>\n                {createBody()}\n                </tbody>\n            </Table>\n            <br/>\n            {showModal ? <CreateEditForm entity={entity}/> : <></>}\n        </>\n    );\n};\n\nDevicesTable.propTypes = {\n    filterBy: PropTypes.string,\n    sortBy: PropTypes.string,\n}\n\nDevicesTable.defaultProps = {\n    filterBy: undefined,\n    sortBy: undefined,\n}\nexport default DevicesTable;\n"]},"metadata":{},"sourceType":"module"}