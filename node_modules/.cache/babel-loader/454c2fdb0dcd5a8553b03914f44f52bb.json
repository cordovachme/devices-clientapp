{"ast":null,"code":"var _jsxFileName = \"/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  DEVICE_TYPE\n} = Constants;\n\nconst CreateEditForm = props => {\n  _s();\n\n  const [validated, setValidated] = useState(false);\n  const {\n    entity\n  } = props;\n  const {\n    create\n  } = useDeviceForm();\n  let entitySaved;\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    if (!entity) {\n      entitySaved = {\n        system_name\n      };\n    }\n\n    console.log(\"form==\", form.elements['systemName'].value); // create(form);\n  };\n\n  const drawOptions = data => {\n    let options = [];\n    data.forEach(option => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.text\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicSystemName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"System name *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter system name\",\n        required: true,\n        id: \"systemName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        children: \"System name is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicType\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Type *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        children: drawOptions(DEVICE_TYPE)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicCapacity\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"HDD Capacity (GB) *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter an HDD Capacity\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n        type: \"invalid\",\n        children: \"HDD Capacity is required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CreateEditForm, \"2CdcKdvayhr9jGnTKA365TD/umg=\", false, function () {\n  return [useDeviceForm];\n});\n\n_c = CreateEditForm;\nCreateEditForm.propTypes = {\n  visible: PropTypes.bool\n};\nCreateEditForm.defaultProps = {\n  visible: false\n};\nexport default CreateEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditForm\");","map":{"version":3,"sources":["/Users/mariacordova/Documents/exercise/devices-clientapp/src/pages/CreateEditForm.js"],"names":["React","useState","Button","Form","PropTypes","Constants","useDeviceForm","DEVICE_TYPE","CreateEditForm","props","validated","setValidated","entity","create","entitySaved","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","system_name","console","log","elements","value","drawOptions","data","options","forEach","option","push","text","propTypes","visible","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport Constants from \"../util/Constants\";\nimport useDeviceForm from \"../hooks/useDeviceForm\";\n\nconst {DEVICE_TYPE} = Constants;\n\nconst CreateEditForm = (props) => {\n    const [validated, setValidated] = useState(false);\n    const {entity} = props;\n    const {create}= useDeviceForm();\n    let entitySaved;\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n        if(!entity){\n            entitySaved={\n                system_name\n            }\n        }\n        console.log(\"form==\", form.elements['systemName'].value);\n        // create(form);\n    };\n\n    const drawOptions = (data) => {\n        let options = [];\n        data.forEach((option) => {\n            options.push(<option key={option.value} value={option.value}>{option.text}</option>);\n        })\n        return options;\n    };\n\n    return <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicSystemName\">\n            <Form.Label>System name *</Form.Label>\n            <Form.Control\n                type=\"text\"\n                placeholder=\"Enter system name\"\n                required\n                id=\"systemName\"\n            />\n            <Form.Control.Feedback type=\"invalid\">\n                {\"System name is required\"}\n            </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicType\">\n            <Form.Label>Type *</Form.Label>\n            <Form.Control as=\"select\">\n                {drawOptions(DEVICE_TYPE)}\n            </Form.Control>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicCapacity\">\n            <Form.Label>HDD Capacity (GB) *</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Enter an HDD Capacity\" required/>\n            <Form.Control.Feedback type=\"invalid\">\n                {\"HDD Capacity is required\"}\n            </Form.Control.Feedback>\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n            Submit\n        </Button>\n    </Form>\n\n}\n\nCreateEditForm.propTypes = {\n    visible: PropTypes.bool,\n}\nCreateEditForm.defaultProps = {\n    visible: false,\n}\n\nexport default CreateEditForm;"]},"metadata":{},"sourceType":"module"}